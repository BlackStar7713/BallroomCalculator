buildscript {

}
plugins {
    id 'com.github.kt3k.coveralls' version '2.6.3'
}
apply plugin: 'com.android.application'

// Load Jacoco Only if needed
if (jacocoEnabled.toBoolean()) {
    project.logger.lifecycle('Applying jacoco build file: jacoco.gradle')
    apply from: rootProject.file("jacoco.gradle")
}

// General switch for tests types this control report generation but not yet unit test selection - TODO Make this a flag
def carvedTests = project.hasProperty('carvedTests')// ? project.getProperty('carvedTests') : false //Default value false

def carvedTestSrcDir = "src/carvedTest"
def testReportPrefix = "${buildDir}/carvedTest/testExecution"
def coverageReportPrefix = "${buildDir}/carvedTest/coverage"

if (carvedTests) {
    if (project.hasProperty('testName')) {
        def testName = project.getProperty('testName')
        println ""
        println "* Processing Carved Test ${testName}"
        println ""

        carvedTestSrcDir = "src/carvedTest/${testName}"

        testReportPrefix = "${buildDir}/carvedTest/${testName}/testExecution"
        coverageReportPrefix = "${buildDir}/carvedTest/${testName}/coverage"
    }
}

android {

    // Change the src folder for carved tests
    sourceSets {
        test {
            if (carvedTests) {
                java.srcDirs = ["$carvedTestSrcDir"]
            }
        }
    }

    compileSdkVersion 30
    dataBinding {
        enabled = true
    }
    defaultConfig {
        applicationId "com.vibbix.ballroom"
        minSdkVersion 18
        targetSdkVersion 30
        versionCode 3
        versionName "2.0.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled jacocoEnabled.toBoolean()
            pseudoLocalesEnabled true
        }
    }
    testOptions {
        testOptions {
            unitTests.all {
                //commented out as this prevents gradle sync from building tasks
                // jacoco {
                //     includeNoLocationClasses = true
                // }

                jvmArgs "-Xmx2g"

                // Nices output on the console/logs
                testLogging {
                    events "passed", "skipped", "failed", "standardOut", "standardError"
                    outputs.upToDateWhen { false }
                    showStandardStreams = true
                }

                test {
                    //Get last path of default set path.
                    def junitXmlTestTaskName = file("$reports.junitXml.destination").name
                    def htmlTestTaskName = file("$reports.html.destination").name

                    if (carvedTests) {
                        // Just use the same?
                        reports.junitXml.destination = file("$testReportPrefix/$junitXmlTestTaskName")
                        reports.html.destination = file("$testReportPrefix/$junitXmlTestTaskName")
                    }

                    filter {
                        //specific test method
                        if (project.hasProperty('carvedTestsFilter')){
                            includeTestsMatching project.carvedTestsFilter
                        }
                    }
                }
            }

            animationsDisabled true
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    compileOptions {
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_7
            targetCompatibility JavaVersion.VERSION_1_7
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'org.parceler:parceler-api:1.1.6'
    annotationProcessor 'org.parceler:parceler:1.1.6'
    implementation 'com.andkulikov:transitionseverywhere:1.7.0'
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation  'com.android.support:animated-vector-drawable:26.1.0'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:3.1.4'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestImplementation 'com.android.support:support-annotations:26.1.0'
    implementation 'com.jakewharton:butterknife:8.5.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'
    androidTestImplementation 'com.android.support.test:runner:0.5'
    androidTestImplementation 'com.android.support.test:rules:0.5'
    // Optional -- Hamcrest library
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
    // Optional -- UI testing with Espresso
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:2.2.2'
    // Optional -- UI testing with UI Automator
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
}

// task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
//     reports {
//        xml.enabled = true
//        xml.destination file("${buildDir}/reports/jacoco/report.xml")
//        html.enabled = true
//        csv.enabled = true
//     }
// 
//     def fileFilter = [
//            '**/R.class',
//            '**/R$*.class',
//            '**/BuildConfig.*',
//            '**/Manifest*.*',
//            '**/*Test*.*',
//            'android/**/*.*',
//            '**/*$ViewInjector*.*',
//            '**/*$ViewBinder*.*',
//            '**/*MembersInjector*.*',
//            '**/*$Lambda$*.class',
//            '**/*Factory*.class',
//            '**/*$Builder*',
//            '**/*$Parcelable*.*',
//            '**/*DaggerApplicationComponent*.class',
//            '**/api']
//     def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
//     def mainSrc = "${project.projectDir}/src/main/java"
// 
//     getSourceDirectories().setFrom(files([mainSrc]))
//     getClassDirectories().setFrom(files([debugTree]))
//     getExecutionData().setFrom(fileTree(dir: "$buildDir", includes: [
//            "jacoco/testDebugUnitTest.exec", "outputs/code-coverage/connected/*coverage.ec"
//     ]))
// }
